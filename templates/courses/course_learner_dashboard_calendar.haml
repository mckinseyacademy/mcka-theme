#over-full-calendar
  #row-full-calendar
    .row
      .large-12        
        #over-calendar-left{style: "width: 80px;height: 290px;position: absolute;background-color: white;padding-top: 25px;background-color:white;z-index:221;"}
          %span#previous-calendar.fa.fa-angle-left
        #over-calendar-right{style: "margin-left: 1020px; width: 80px;height: 290px;position: absolute;background-color: white;padding-top: 25px;background-color:white;z-index:221;"}
          %span#next-calendar.fa.fa-angle-right
        #under-calendar
          %span#close-calendar.fa.fa-times-circle
          %ul.tab-month
            %li.head-month
              %span.month
            %li.first.last
            %li.second.last
          %ul.tab-month
            %li.head-month
              %span.month
            %li.first.last
            %li.second.last
          %ul.tab-month
            %li.head-month
              %span.month
            %li.first.last
            %li.second.last
          %ul.tab-month
            %li.head-month
              %span.month
            %li.first.last
            %li.second.last
          %ul.legend-list
            %li.light-gray-legend
              %i.fa.fa-circle
              not available
            %li.gray-legend
              %i.fa.fa-circle
              not started
            %li.light-green-legend
              %i.fa.fa-circle
              in progress
            %li.green-legend
              %i.fa.fa-circle
              complete
            %li.red-legend
              %i.fa.fa-circle
              incomplete
            %li.teal-legend
              %i.fa.fa-circle
              not tracked

        #highcharts-container


%script
  var now = new Date();
  var milestones = {{milestones|safe}} ? {{milestones|safe}}: [];
  var dates = {{dates|safe}} ? {{dates|safe}}: [];
  var courses = {{courses|safe}} ? {{courses|safe}}: [];

  var dateList = [];

  var mlist = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];

  for (var i=0; i < 5; i++) {
    dateList.push(
      Date.UTC((new Date(dates[i])).getUTCFullYear(), (new Date(dates[i])).getUTCMonth())
    );
  }

  addMonthNames(dates);
  addExtraSpaceToFrontEnd();
  
  var minDate = dateList[1];
  var maxDate = dateList[5];
  var maxRow = 1;

  var dataIPS = [];
  var dataCourse = [];
  var dataWeb = [];
  var dataDig = [];

  var low;
  var high;

  processMilestones();

  function processMilestones() {

    var timeNow = (new Date()).getTime();

    for (var j=0 in courses){

      if (courses[j].start < minDate)
        minDate = courses[j].start;
      if (courses[j].end > maxDate)
        maxDate = courses[j].end;

      if (parseInt(courses[j].row, 10) > maxRow)
        maxRow = parseInt(courses[j].row, 10);

      if (courses[j].label)
        courses[j].label = courses[j].label.substring(0, 16);

      if (courses[j].tile_type == "2" || courses[j].tile_type == "3") {

        dataDig.push({
          color: calculateColor(courses[j], timeNow),
          x: (courses[j].row - 1),
          tile_type: courses[j].tile_type,
          label: courses[j].label,
          name: courses[j].name,
          link: courses[j].link,
          publish_date: getPublishDate(courses[j]),
          user_progress: ("Your progress: " + courses[j].user_progress + "%"),
          low: courses[j].start,
          high: courses[j].end,
          fa_icon: milestones[i]["fields"].fa_icon ? unescape('%u' + milestones[i]["fields"].fa_icon.slice(-6,-2)) : '\uf109'
        });
      }

      if (courses[j].tile_type == "4"){

        dataCourse.push({
          color: calculateColor(courses[j], timeNow),
          x: (courses[j].row - 1),
          tile_type: courses[j].tile_type,
          label: courses[j].label,
          name: courses[j].name,
          link: courses[j].link,
          publish_date: getPublishDate(courses[j]),
          user_progress: ("Your progress: " + courses[j].user_progress + "%"),
          cohort_progress: ("Cohort progress: " + courses[j].cohort_progress + "%"),
          low: courses[j].start,
          high: courses[j].end
        });
      }
    }

    for (var i=0 in milestones) {
      low = (Date.parse(milestones[i]["fields"].start_date)).getTime();
      high = (Date.parse(milestones[i]["fields"].end_date)).getTime();

      if (low < minDate)
        minDate = low;
      if (high > maxDate)
        maxDate = high;

      if (parseInt(milestones[i]["fields"].row, 10) > maxRow)
        maxRow = parseInt(milestones[i]["fields"].row, 10);

      if (milestones[i]["fields"].label)
        milestones[i]["fields"].label = milestones[i]["fields"].label.substring(0, 16);

      if (milestones[i]["fields"].tile_type == "1") {
        dataDig.push({
          color: '#66a5b5',
          x: (milestones[i]["fields"].row - 1),
          tile_type: milestones[i]["fields"].tile_type,
          label: milestones[i]["fields"].label,
          name: milestones[i]["fields"].title,
          publish_date: getPublishDate(milestones[i]["fields"]),
          link: milestones[i]["fields"].link,
          low: low,
          high: high,
          fa_icon: milestones[i]["fields"].fa_icon ? unescape('%u' + milestones[i]["fields"].fa_icon.slice(-6,-2)) : '\uf109'
        });
      }

      if (milestones[i]["fields"].tile_type == "5") {
        dataIPS.push({
          color: '#66a5b5',
          x: (milestones[i]["fields"].row - 1),
          tile_type: milestones[i]["fields"].tile_type,
          label: milestones[i]["fields"].label,
          name: milestones[i]["fields"].title,
          note: milestones[i]["fields"].note,
          publish_date: getPublishDate(milestones[i]["fields"]),
          details: milestones[i]["fields"].details,
          link: milestones[i]["fields"].link,
          low: low,
          high: high,
          fa_icon: milestones[i]["fields"].fa_icon ? unescape('%u' + milestones[i]["fields"].fa_icon.slice(-6,-2)) : '\uf0c0'
        });
      }

      if (milestones[i]["fields"].tile_type == "6") {
        dataWeb.push({
          color: '#66a5b5',
          x: (milestones[i]["fields"].row - 1),
          tile_type: milestones[i]["fields"].tile_type,
          label: milestones[i]["fields"].label,
          name: milestones[i]["fields"].title,
          link: milestones[i]["fields"].link,
          publish_date: getPublishDate(milestones[i]["fields"]),
          details: milestones[i]["fields"].details,
          low: low,
          high: high,
          fa_icon: milestones[i]["fields"].fa_icon ? unescape('%u' + milestones[i]["fields"].fa_icon.slice(-6,-2)) : '\uf03d'
        });
      }
    }
  }

  for (i=1; i < maxRow; i++) {
    $( "<li class='first'></li><li class='second'></li>" ).insertBefore( ".first.last" );
  }

  function getPublishDate(element){
    if (element.publish_date){
      return new Date(element.publish_date);
    } else {
      return null;
    }
  }

  function calculateColor(element, now){
    switch(element.tile_type) {
      case '3':
        if (now < element.start){
          return '#e0e0e0';
          break;
          } else if (now >= element.start && element.user_progress == 0){
              return '#ccc';
              break;
          } else if (now >= element.start && element.user_progress == 100 ){
              return '#629b2b';
              break;
          } else if (now >= element.start && element.user_progress < 100 ){
              return '#cd202c';
              break;
          }
      case '2':
      case '4':
        if (now < element.start){
          return '#e0e0e0';
          break;
          } else if (now >= element.start && element.user_progress == 0){
              return '#ccc';
              break;
          } else if (now >= element.start && (element.user_progress > 0 && element.user_progress < 100) ){
              return '#b6d332';
              break;
          } else if (now >= element.start && element.user_progress == 100 ){
              return '#629b2b';
              break;
          } else if (now >= element.start && element.user_progress < 100 ){
              return '#cd202c';
              break;
          }
    }
  }

  changeDisableArrowColors();

  $('#close-calendar').click(function() {
    $('#replace-calendar').empty();
    opened = false;
  });

  $('#next-calendar').click(function() {
    if (maxDate > dateList[5]) {
      $( "#previous-calendar").css( "color", "#4789c4" );
      moveCalendarDates(4);
    }
  });

  $('#previous-calendar').click(function() {
    if (minDate < dateList[1]) {
      $( "#next-calendar").css( "color", "#4789c4" );
      moveCalendarDates(-4);
    }
  });

  function moveCalendarDates(moveMonth) {
    var chart = $('#highcharts-container').highcharts();
    extremes = chart.yAxis[0].getExtremes();

    var newMinDate = new Date(extremes.min + 86400 * 9 *1000);
    newMinDate = newMinDate.setUTCMonth((newMinDate).getUTCMonth() + moveMonth);

    extremes.min = Date.UTC((new Date(newMinDate)).getUTCFullYear(), (new Date(newMinDate)).getUTCMonth());
    extremes.max = Date.UTC((new Date(newMinDate)).getUTCFullYear(), (new Date(newMinDate)).getUTCMonth() + 4);

    dateList = [];
    for (var i=0; i < 5; i++) {
      dateList.push(
        Date.UTC((new Date(newMinDate)).getUTCFullYear(), (new Date(newMinDate)).getUTCMonth() + i)
      );
    }

    addMonthNames( dateList );
    addExtraSpaceToFrontEnd();

    chart.yAxis[0].options.tickInterval = dateList;
    chart.yAxis[0].isDirty = true;

    chart.yAxis[0].setExtremes(extremes.min, extremes.max);
    changeDisableArrowColors();
  }

  function addExtraSpaceToFrontEnd() {
    dateList.push(dateList[4] + 86400 * 9 * 1000);
    dateList.unshift(dateList[0] - 86400 * 9 * 1000);
  }

  function changeDisableArrowColors() {
    if (minDate >= dateList[1])
      $( '#previous-calendar').css( 'color', '#868685' );
    if (maxDate <= dateList[5])
      $('#next-calendar').css( 'color', '#868685' );
  }

  function addMonthNames( dateList ) {
    $( ".month" ).each(function( index ) {
      $( this ).parent().removeClass( "active" );
      $( this ).html( mlist[new Date(dateList[index]).getMonth()] );

      if ( ((new Date(dateList[index])).getMonth()) == (new Date()).getMonth() && ((new Date(dateList[index + 1])).getYear()) == (new Date()).getYear())
        $( this ).parent().addClass( "active" );
    });
  }

%script{src: "/static/js/course_learner_dashboard/learner_dashboard_calendar_highcharts.js"}
