#over-full-calendar
  .row.
    .large-12
      #over-calendar
        %span#next-calendar.fa.fa-angle-right
        %span#previous-calendar.fa.fa-angle-left
        %span#close-calendar.fa.fa-close
        %ul.tab-month
          %li.head-month
            %span.month
          %li.first
          %li.second
          %li.first
          %li.second
          %li.first
          %li.second
          %li.first.last
          %li.second.last
        %ul.tab-month
          %li.head-month
            %span.month
          %li.first
          %li.second
          %li.first
          %li.second
          %li.first
          %li.second
          %li.first.last
          %li.second.last
        %ul.tab-month
          %li.head-month
            %span.month
          %li.first
          %li.second
          %li.first
          %li.second
          %li.first
          %li.second
          %li.first.last
          %li.second.last
        %ul.tab-month
          %li.head-month
            %span.month
          %li.first
          %li.second
          %li.first
          %li.second
          %li.first
          %li.second
          %li.first.last
          %li.second.last
        %ul.legend-list
          %li.light-gray-legend
            %i.fa.fa-circle
            not available
          %li.gray-legend
            %i.fa.fa-circle
            not started
          %li.light-green-legend
            %i.fa.fa-circle
            in progress
          %li.green-legend
            %i.fa.fa-circle
            complete
          %li.red-legend
            %i.fa.fa-circle
            incomplete
          %li.teal-legend
            %i.fa.fa-circle
            not tracked

      #highcharts-container


%script
  var milestones = {{milestones|safe}} ? {{milestones|safe}}: [];
  var dates = {{dates|safe}} ? {{dates|safe}}: [];

  var dataIPS = [];
  var dataWeb = [];
  var dataDig = [];
  var dateList = [];

  var mlist = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];

  for (var i=0; i < 5; i++) {
    dateList.push(
      Date.UTC((new Date(dates[i])).getUTCFullYear(), (new Date(dates[i])).getUTCMonth())
    );
  }

  addMonthNames(dates);

  for (var i=0; i < milestones.length; i++){
    if (milestones[i]["fields"].milestone_type == "1") {
      dataIPS.push({
        color: '#e0e0e0',
        x: 0,
        label: milestones[i]["fields"].label,
        name: milestones[i]["fields"].title,
        location: milestones[i]["fields"].location,
        details: milestones[i]["fields"].details,
        link: milestones[i]["fields"].link,
        low: processDate(new Date(milestones[i]["fields"].start_date)),
        high: processDate(new Date(milestones[i]["fields"].end_date))
      });
    }

    if (milestones[i]["fields"].milestone_type == "2") {
      dataWeb.push({
        color: '#e0e0e0',
        x: 2,
        label: milestones[i]["fields"].label,
        name: milestones[i]["fields"].title,
        link: milestones[i]["fields"].link,
        details: milestones[i]["fields"].details,
        link: milestones[i]["fields"].link,
        low: processDate(new Date(milestones[i]["fields"].start_date)),
        high: processDate(new Date(milestones[i]["fields"].end_date))
      });
    }

    if (milestones[i]["fields"].milestone_type == "3") {
      dataDig.push({
        color: '#e0e0e0',
        x: 3,
        label: milestones[i]["fields"].label,
        name: milestones[i]["fields"].title,
        link: milestones[i]["fields"].link,
        low: processDate(new Date(milestones[i]["fields"].start_date)),
        high: processDate(new Date(milestones[i]["fields"].end_date))
      });
    }
  }

  $('#close-calendar').click(function() {
    $('#replace-calendar').empty();
  });

  $('#next-calendar').click(function() {
    moveCalendarDates(4);
  });

  $('#previous-calendar').click(function() {
    moveCalendarDates(-4);
  });

  function moveCalendarDates(moveMonth) {
    var chart = $('#highcharts-container').highcharts();
    extremes = chart.yAxis[0].getExtremes();

    var min_date = new Date(extremes.min);
    min_date = min_date.setUTCMonth((min_date).getUTCMonth() + moveMonth);

    extremes.min = Date.UTC((new Date(min_date)).getUTCFullYear(), (new Date(min_date)).getUTCMonth());
    extremes.max = Date.UTC((new Date(min_date)).getUTCFullYear(), (new Date(min_date)).getUTCMonth() + 4);

    dateList = [];
    for (var i=0; i < 5; i++) {
      dateList.push(
        Date.UTC((new Date(min_date)).getUTCFullYear(), (new Date(min_date)).getUTCMonth() + i)
      );
    }

    chart.yAxis[0].options.tickInterval = dateList;
    chart.yAxis[0].isDirty = true;

    chart.yAxis[0].setExtremes(extremes.min, extremes.max);

    addMonthNames( dateList );
  }

  function addMonthNames( dateList ) {
    $( ".month" ).each(function( index ) {
      $( this ).parent().removeClass( "active" );
      $( this ).html( mlist[new Date(dateList[index]).getMonth()] );

      if ( ((new Date(dateList[index])).getMonth()) == (new Date()).getMonth() && ((new Date(dateList[index + 1])).getYear()) == (new Date()).getYear())
        $( this ).parent().addClass( "active" );
    });
  }

  function processDate(date) {
    return Date.UTC((new Date(milestones[i]["fields"].start_date)).getUTCFullYear(), (new Date(milestones[i]["fields"].start_date)).getUTCMonth(), (new Date(milestones[i]["fields"].start_date)).getUTCDate(), (new Date(milestones[i]["fields"].start_date)).getUTCHours(), (new Date(milestones[i]["fields"].start_date)).getUTCMinutes());
  }

%script{src: "/static/js/learner_dashboard_calendar_highcharts.js"}
